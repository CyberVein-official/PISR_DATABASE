# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from grpc_demo.cybervein import cybervein_pb2 as cybervein__pb2


class cyberveinStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Auth = channel.unary_unary(
        '/cybervein/Auth',
        request_serializer=cybervein__pb2.AuthRequest.SerializeToString,
        response_deserializer=cybervein__pb2.Token.FromString,
        )
    self.Query = channel.unary_unary(
        '/cybervein/Query',
        request_serializer=cybervein__pb2.CommandRequest.SerializeToString,
        response_deserializer=cybervein__pb2.QueryResponse.FromString,
        )
    self.QueryPrivateData = channel.unary_unary(
        '/cybervein/QueryPrivateData',
        request_serializer=cybervein__pb2.CommandRequest.SerializeToString,
        response_deserializer=cybervein__pb2.QueryResponse.FromString,
        )
    self.QueryPrivateDataWithAddress = channel.unary_unary(
        '/cybervein/QueryPrivateDataWithAddress',
        request_serializer=cybervein__pb2.QueryPrivateWithAddrRequest.SerializeToString,
        response_deserializer=cybervein__pb2.QueryResponse.FromString,
        )
    self.Execute = channel.unary_unary(
        '/cybervein/Execute',
        request_serializer=cybervein__pb2.CommandRequest.SerializeToString,
        response_deserializer=cybervein__pb2.ExecuteResponse.FromString,
        )
    self.ExecuteAsync = channel.unary_unary(
        '/cybervein/ExecuteAsync',
        request_serializer=cybervein__pb2.CommandRequest.SerializeToString,
        response_deserializer=cybervein__pb2.ExecuteAsyncResponse.FromString,
        )
    self.ExecuteWithPrivateKey = channel.unary_unary(
        '/cybervein/ExecuteWithPrivateKey',
        request_serializer=cybervein__pb2.CommandRequest.SerializeToString,
        response_deserializer=cybervein__pb2.ExecuteResponse.FromString,
        )


class cyberveinServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Auth(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Query(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def QueryPrivateData(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def QueryPrivateDataWithAddress(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Execute(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ExecuteAsync(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ExecuteWithPrivateKey(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_cyberveinServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Auth': grpc.unary_unary_rpc_method_handler(
          servicer.Auth,
          request_deserializer=cybervein__pb2.AuthRequest.FromString,
          response_serializer=cybervein__pb2.Token.SerializeToString,
      ),
      'Query': grpc.unary_unary_rpc_method_handler(
          servicer.Query,
          request_deserializer=cybervein__pb2.CommandRequest.FromString,
          response_serializer=cybervein__pb2.QueryResponse.SerializeToString,
      ),
      'QueryPrivateData': grpc.unary_unary_rpc_method_handler(
          servicer.QueryPrivateData,
          request_deserializer=cybervein__pb2.CommandRequest.FromString,
          response_serializer=cybervein__pb2.QueryResponse.SerializeToString,
      ),
      'QueryPrivateDataWithAddress': grpc.unary_unary_rpc_method_handler(
          servicer.QueryPrivateDataWithAddress,
          request_deserializer=cybervein__pb2.QueryPrivateWithAddrRequest.FromString,
          response_serializer=cybervein__pb2.QueryResponse.SerializeToString,
      ),
      'Execute': grpc.unary_unary_rpc_method_handler(
          servicer.Execute,
          request_deserializer=cybervein__pb2.CommandRequest.FromString,
          response_serializer=cybervein__pb2.ExecuteResponse.SerializeToString,
      ),
      'ExecuteAsync': grpc.unary_unary_rpc_method_handler(
          servicer.ExecuteAsync,
          request_deserializer=cybervein__pb2.CommandRequest.FromString,
          response_serializer=cybervein__pb2.ExecuteAsyncResponse.SerializeToString,
      ),
      'ExecuteWithPrivateKey': grpc.unary_unary_rpc_method_handler(
          servicer.ExecuteWithPrivateKey,
          request_deserializer=cybervein__pb2.CommandRequest.FromString,
          response_serializer=cybervein__pb2.ExecuteResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cybervein', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
