// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc_serivce.proto

package rpc_serivce

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AuthRequest struct {
	Password             string   `protobuf:"bytes,1,opt,name=Password,proto3" json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8020700a4ab37802, []int{0}
}

func (m *AuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRequest.Unmarshal(m, b)
}
func (m *AuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRequest.Marshal(b, m, deterministic)
}
func (m *AuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRequest.Merge(m, src)
}
func (m *AuthRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRequest.Size(m)
}
func (m *AuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRequest proto.InternalMessageInfo

func (m *AuthRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Token struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_8020700a4ab37802, []int{1}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type CommandRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8020700a4ab37802, []int{2}
}

func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandRequest.Unmarshal(m, b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return xxx_messageInfo_CommandRequest.Size(m)
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

func (m *CommandRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type QueryPrivateWithAddrRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryPrivateWithAddrRequest) Reset()         { *m = QueryPrivateWithAddrRequest{} }
func (m *QueryPrivateWithAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPrivateWithAddrRequest) ProtoMessage()    {}
func (*QueryPrivateWithAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8020700a4ab37802, []int{3}
}

func (m *QueryPrivateWithAddrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryPrivateWithAddrRequest.Unmarshal(m, b)
}

func (m *QueryPrivateWithAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryPrivateWithAddrRequest.Marshal(b, m, deterministic)
}

func (m *QueryPrivateWithAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrivateWithAddrRequest.Merge(m, src)
}

func (m *QueryPrivateWithAddrRequest) XXX_Size() int {
	return xxx_messageInfo_QueryPrivateWithAddrRequest.Size(m)
}

func (m *QueryPrivateWithAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrivateWithAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrivateWithAddrRequest proto.InternalMessageInfo

func (m *QueryPrivateWithAddrRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *QueryPrivateWithAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8020700a4ab37802, []int{4}
}

func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type ExecuteResponse struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	ExecuteResult        string   `protobuf:"bytes,2,opt,name=ExecuteResult,proto3" json:"ExecuteResult,omitempty"`
	Signature            string   `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Sequence             string   `protobuf:"bytes,4,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	TimeStamp            string   `protobuf:"bytes,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	Hash                 string   `protobuf:"bytes,6,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Height               int64    `protobuf:"varint,7,opt,name=Height,proto3" json:"Height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteResponse) Reset()         { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()    {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8020700a4ab37802, []int{5}
}

func (m *ExecuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteResponse.Unmarshal(m, b)
}
func (m *ExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteResponse.Marshal(b, m, deterministic)
}
func (m *ExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteResponse.Merge(m, src)
}
func (m *ExecuteResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteResponse.Size(m)
}
func (m *ExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteResponse proto.InternalMessageInfo

func (m *ExecuteResponse) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *ExecuteResponse) GetExecuteResult() string {
	if m != nil {
		return m.ExecuteResult
	}
	return ""
}

func (m *ExecuteResponse) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ExecuteResponse) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *ExecuteResponse) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func (m *ExecuteResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ExecuteResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ExecuteAsyncResponse struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	Signature            string   `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Sequence             string   `protobuf:"bytes,3,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	TimeStamp            string   `protobuf:"bytes,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	Hash                 string   `protobuf:"bytes,5,opt,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteAsyncResponse) Reset()         { *m = ExecuteAsyncResponse{} }
func (m *ExecuteAsyncResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteAsyncResponse) ProtoMessage()    {}
func (*ExecuteAsyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8020700a4ab37802, []int{6}
}

func (m *ExecuteAsyncResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteAsyncResponse.Unmarshal(m, b)
}
func (m *ExecuteAsyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteAsyncResponse.Marshal(b, m, deterministic)
}
func (m *ExecuteAsyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteAsyncResponse.Merge(m, src)
}
func (m *ExecuteAsyncResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteAsyncResponse.Size(m)
}
func (m *ExecuteAsyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteAsyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteAsyncResponse proto.InternalMessageInfo

func (m *ExecuteAsyncResponse) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *ExecuteAsyncResponse) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ExecuteAsyncResponse) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

func (m *ExecuteAsyncResponse) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func (m *ExecuteAsyncResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthRequest)(nil), "AuthRequest")
	proto.RegisterType((*Token)(nil), "Token")
	proto.RegisterType((*CommandRequest)(nil), "CommandRequest")
	proto.RegisterType((*QueryPrivateWithAddrRequest)(nil), "QueryPrivateWithAddrRequest")
	proto.RegisterType((*QueryResponse)(nil), "QueryResponse")
	proto.RegisterType((*ExecuteResponse)(nil), "ExecuteResponse")
	proto.RegisterType((*ExecuteAsyncResponse)(nil), "ExecuteAsyncResponse")
}

func init() { proto.RegisterFile("rpc_serivce.proto", fileDescriptor_8020700a4ab37802) }

var fileDescriptor_8020700a4ab37802 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x13, 0xdb, 0x69, 0x87, 0x7e, 0x84, 0x55, 0x8b, 0x56, 0xa1, 0x48, 0xd5, 0x0a, 0x89,
	0x20, 0xa1, 0x3d, 0x50, 0x89, 0x03, 0xb7, 0xa8, 0x20, 0x15, 0xf5, 0x52, 0x9c, 0x4a, 0x1c, 0xd1,
	0x62, 0x8f, 0xea, 0x15, 0xf8, 0x83, 0xdd, 0x75, 0x21, 0xff, 0x83, 0xbf, 0xc5, 0xdf, 0xe1, 0x8c,
	0xd6, 0x5e, 0x27, 0x31, 0x26, 0x86, 0xdb, 0xbe, 0xf1, 0xbc, 0x99, 0x37, 0x33, 0xcf, 0xf0, 0x50,
	0x95, 0xf1, 0x47, 0x8d, 0x4a, 0xde, 0xc7, 0xc8, 0x4b, 0x55, 0x98, 0x82, 0x3d, 0x87, 0x07, 0x8b,
	0xca, 0xa4, 0x11, 0x7e, 0xad, 0x50, 0x1b, 0x32, 0x83, 0xbd, 0x1b, 0xa1, 0xf5, 0xb7, 0x42, 0x25,
	0xd4, 0x3b, 0xf7, 0xe6, 0xfb, 0xd1, 0x1a, 0xb3, 0x27, 0x10, 0xdc, 0x16, 0x9f, 0x31, 0x27, 0x27,
	0x10, 0x18, 0xfb, 0x70, 0x19, 0x0d, 0x60, 0x0c, 0x8e, 0x2e, 0x8b, 0x2c, 0x13, 0x79, 0xd2, 0x16,
	0x9b, 0xc2, 0xf8, 0x32, 0x6b, 0xeb, 0xd8, 0x27, 0x7b, 0x07, 0x8f, 0xdf, 0x57, 0xa8, 0x56, 0x37,
	0x4a, 0xde, 0x0b, 0x83, 0x1f, 0xa4, 0x49, 0x17, 0x49, 0xa2, 0x76, 0x12, 0x08, 0x85, 0x89, 0x4d,
	0x40, 0xad, 0xe9, 0xa8, 0x8e, 0xb6, 0x90, 0x3d, 0x83, 0xc3, 0xba, 0x54, 0x84, 0xba, 0x2c, 0x72,
	0x8d, 0xe4, 0x11, 0x84, 0x11, 0xea, 0xea, 0x8b, 0x71, 0x7c, 0x87, 0xd8, 0x4f, 0x0f, 0x8e, 0xdf,
	0x7e, 0xc7, 0xb8, 0x32, 0xb8, 0xce, 0xed, 0x37, 0x7a, 0x0a, 0x87, 0x9b, 0x24, 0x5b, 0xa4, 0x69,
	0xd7, 0x0d, 0x92, 0x33, 0xd8, 0x5f, 0xca, 0xbb, 0x5c, 0x98, 0x4a, 0x21, 0x1d, 0xd7, 0x19, 0x9b,
	0x80, 0x5d, 0xde, 0xd2, 0x4e, 0x92, 0xc7, 0x48, 0xfd, 0x66, 0x79, 0x2d, 0xb6, 0xcc, 0x5b, 0x99,
	0xe1, 0xd2, 0x88, 0xac, 0xa4, 0x41, 0xc3, 0x5c, 0x07, 0x08, 0x01, 0xff, 0x4a, 0xe8, 0x94, 0x86,
	0xf5, 0x87, 0xfa, 0x6d, 0xe7, 0xb9, 0x42, 0x79, 0x97, 0x1a, 0x3a, 0x39, 0xf7, 0xe6, 0xe3, 0xc8,
	0x21, 0xf6, 0xc3, 0x83, 0x13, 0xa7, 0x6a, 0xa1, 0x57, 0x79, 0x3c, 0x30, 0x54, 0x47, 0xee, 0x68,
	0x48, 0xee, 0x78, 0x48, 0xae, 0xbf, 0x4b, 0x6e, 0xb0, 0x91, 0xfb, 0xf2, 0xd7, 0x08, 0xf6, 0x22,
	0x4c, 0x64, 0x26, 0x73, 0xbb, 0x27, 0xdf, 0xba, 0x8a, 0x1c, 0xf0, 0x2d, 0x73, 0xcd, 0x42, 0xde,
	0xf8, 0x67, 0x0e, 0x41, 0x7d, 0x3a, 0x72, 0xcc, 0xbb, 0x8e, 0x99, 0x1d, 0xf1, 0xee, 0x4d, 0x2f,
	0x60, 0xba, 0xed, 0x97, 0x37, 0xc2, 0x88, 0x7f, 0x93, 0xae, 0xbb, 0x26, 0xb3, 0xa4, 0xd6, 0x68,
	0xa8, 0x35, 0x39, 0xe3, 0x03, 0x16, 0xec, 0x15, 0x7b, 0x01, 0x13, 0xb7, 0xec, 0x7e, 0xe3, 0x29,
	0xff, 0xd3, 0x57, 0xaf, 0xe0, 0x60, 0xfb, 0x34, 0x7d, 0xca, 0x29, 0xff, 0xeb, 0xe9, 0x5e, 0xc3,
	0xa9, 0x8b, 0x5b, 0x3d, 0x4e, 0xda, 0x35, 0xae, 0xfe, 0xa3, 0xe7, 0xa7, 0xb0, 0xfe, 0x91, 0x2f,
	0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xe8, 0x66, 0x6f, 0xdd, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// cyberveinClient is the client API for cybervein service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type cyberveinClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Token, error)
	Query(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	QueryPrivateData(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	QueryPrivateDataWithAddress(ctx context.Context, in *QueryPrivateWithAddrRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Execute(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	ExecuteAsync(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*ExecuteAsyncResponse, error)
	ExecuteWithPrivateKey(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type cyberveinClient struct {
	cc *grpc.ClientConn
}

func NewcyberveinClient(cc *grpc.ClientConn) cyberveinClient {
	return &cyberveinClient{cc}
}

func (c *cyberveinClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/cybervein/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberveinClient) Query(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/cybervein/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberveinClient) QueryPrivateData(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/cybervein/QueryPrivateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberveinClient) QueryPrivateDataWithAddress(ctx context.Context, in *QueryPrivateWithAddrRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/cybervein/QueryPrivateDataWithAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberveinClient) Execute(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/cybervein/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberveinClient) ExecuteAsync(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*ExecuteAsyncResponse, error) {
	out := new(ExecuteAsyncResponse)
	err := c.cc.Invoke(ctx, "/cybervein/ExecuteAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyberveinClient) ExecuteWithPrivateKey(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/cybervein/ExecuteWithPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// cyberveinServer is the server API for cybervein service.
type cyberveinServer interface {
	Auth(context.Context, *AuthRequest) (*Token, error)
	Query(context.Context, *CommandRequest) (*QueryResponse, error)
	QueryPrivateData(context.Context, *CommandRequest) (*QueryResponse, error)
	QueryPrivateDataWithAddress(context.Context, *QueryPrivateWithAddrRequest) (*QueryResponse, error)
	Execute(context.Context, *CommandRequest) (*ExecuteResponse, error)
	ExecuteAsync(context.Context, *CommandRequest) (*ExecuteAsyncResponse, error)
	ExecuteWithPrivateKey(context.Context, *CommandRequest) (*ExecuteResponse, error)
}

// UnimplementedcyberveinServer can be embedded to have forward compatible implementations.
type UnimplementedcyberveinServer struct {
}

func (*UnimplementedcyberveinServer) Auth(ctx context.Context, req *AuthRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedcyberveinServer) Query(ctx context.Context, req *CommandRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedcyberveinServer) QueryPrivateData(ctx context.Context, req *CommandRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPrivateData not implemented")
}
func (*UnimplementedcyberveinServer) QueryPrivateDataWithAddress(ctx context.Context, req *QueryPrivateWithAddrRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPrivateDataWithAddress not implemented")
}
func (*UnimplementedcyberveinServer) Execute(ctx context.Context, req *CommandRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedcyberveinServer) ExecuteAsync(ctx context.Context, req *CommandRequest) (*ExecuteAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAsync not implemented")
}
func (*UnimplementedcyberveinServer) ExecuteWithPrivateKey(ctx context.Context, req *CommandRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteWithPrivateKey not implemented")
}

func RegistercyberveinServer(s *grpc.Server, srv cyberveinServer) {
	s.RegisterService(&_cybervein_serviceDesc, srv)
}

func _cybervein_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(cyberveinServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cybervein/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(cyberveinServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _cybervein_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(cyberveinServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cybervein/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(cyberveinServer).Query(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _cybervein_QueryPrivateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(cyberveinServer).QueryPrivateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cybervein/QueryPrivateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(cyberveinServer).QueryPrivateData(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _cybervein_QueryPrivateDataWithAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPrivateWithAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(cyberveinServer).QueryPrivateDataWithAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cybervein/QueryPrivateDataWithAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(cyberveinServer).QueryPrivateDataWithAddress(ctx, req.(*QueryPrivateWithAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _cybervein_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(cyberveinServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cybervein/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(cyberveinServer).Execute(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _cybervein_ExecuteAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(cyberveinServer).ExecuteAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cybervein/ExecuteAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(cyberveinServer).ExecuteAsync(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _cybervein_ExecuteWithPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(cyberveinServer).ExecuteWithPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cybervein/ExecuteWithPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(cyberveinServer).ExecuteWithPrivateKey(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _cybervein_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cybervein",
	HandlerType: (*cyberveinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _cybervein_Auth_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _cybervein_Query_Handler,
		},
		{
			MethodName: "QueryPrivateData",
			Handler:    _cybervein_QueryPrivateData_Handler,
		},
		{
			MethodName: "QueryPrivateDataWithAddress",
			Handler:    _cybervein_QueryPrivateDataWithAddress_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _cybervein_Execute_Handler,
		},
		{
			MethodName: "ExecuteAsync",
			Handler:    _cybervein_ExecuteAsync_Handler,
		},
		{
			MethodName: "ExecuteWithPrivateKey",
			Handler:    _cybervein_ExecuteWithPrivateKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_serivce.proto",
}
